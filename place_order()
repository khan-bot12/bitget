def place_order(action, symbol, quantity, leverage):
    print(f"üì© Received webhook: action={action}, symbol={symbol}, qty={quantity}, leverage={leverage}")

    # Get current position
    position_side = get_current_position(symbol)
    print(f"üìä Current position on {symbol}: {position_side}")

    # Close opposite position if open
    try:
        if action == "buy" and position_side == "short":
            print("üîÅ Closing short position before opening long...")
            close_order = client.mix_place_order(
                symbol=symbol,
                productType="umcbl",
                marginMode="crossed",
                side="close_short",
                orderType="market",
                size=str(quantity),
                price="",  # market order
                reduceOnly=True
            )
            print(f"‚úÖ Closed short position: {close_order}")

        elif action == "sell" and position_side == "long":
            print("üîÅ Closing long position before opening short...")
            close_order = client.mix_place_order(
                symbol=symbol,
                productType="umcbl",
                marginMode="crossed",
                side="close_long",
                orderType="market",
                size=str(quantity),
                price="",  # market order
                reduceOnly=True
            )
            print(f"‚úÖ Closed long position: {close_order}")

    except Exception as e:
        print(f"‚ùå Error closing opposite position: {e}")

    # Set leverage
    try:
        leverage_response = client.mix_set_leverage(
            symbol=symbol,
            productType="umcbl",
            marginMode="crossed",
            leverage=leverage
        )
        print(f"‚öôÔ∏è Leverage set to {leverage}x: {leverage_response}")
    except Exception as e:
        print(f"‚ùå Error setting leverage: {e}")

    # Place new order
    try:
        side = "open_long" if action == "buy" else "open_short"
        order_response = client.mix_place_order(
            symbol=symbol,
            productType="umcbl",
            marginMode="crossed",
            side=side,
            orderType="market",
            size=str(quantity),
            price="",  # market order
            reduceOnly=False
        )
        print(f"‚úÖ New {action.upper()} order placed: {order_response}")
        return {
            "status": "success",
            "exchange_response": order_response
        }
    except Exception as e:
        print(f"‚ùå Order placement failed: {e}")
        return {
            "status": "error",
            "message": str(e)
        }
